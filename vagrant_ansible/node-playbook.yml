---
    - hosts: all
      become: true
      tasks:

      - name: Install packages that allow apt to be used over HTTPS
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

      - name: Add an apt signing key for Docker
        apt_key:
          url: https://download.docker.com/linux/ubuntu/gpg
          state: present

      - name: Add apt repository for stable version
        apt_repository:
          repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
          state: present

      - name: Install docker and its dependecies
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        notify:
          - docker status

      - name: Add vagrant user to docker group
        user:
          name: vagrant
          group: docker

      - name: Remove swapfile from /etc/fstab
        mount:
          name: "{{ item }}"
          fstype: swap
          state: absent
        with_items:
          - swap
          - none

      - name: Disable swap
        command: swapoff -a
        when: ansible_swaptotal_mb > 0

      - name: Add an apt signing key for Kubernetes
        apt_key:
          url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
          state: present

      - name: Adding apt repository for Kubernetes
        apt_repository:
          repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
          state: present
          filename: kubernetes.list

      - name: Install Kubernetes binaries
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
            - kubelet
            - kubeadm
            - kubectl

      - name: Configure node ip
        lineinfile:
          path: /etc/default/kubelet
          line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
          create: yes
        register: config_node_ip

      - name: Restart kubelet
        service:
          name: kubelet
          daemon_reload: yes
          state: restarted
        when: config_node_ip.changed

      - name: Get ckecksum of remote join-command.sh
        stat:
          path : "join-command.sh"
        register: existingFile

      # It is assumed that this file exists as master-playbook.yml was run before and created it
      - name: Get ckecksum of local join-command.sh
        stat:
          path: "join-command.sh"
        delegate_to: localhost
        become: false
        register: newFile

      - name: Copy the join command to server location (if required)
        copy: src=join-command.sh dest=join-command.sh mode=0777
        register: JoinCommandCopied
        when: not existingFile.stat.exists or existingFile.stat.checksum != newFile.stat.checksum

      - name: Prepare join-command - 1) Check if kube config exists
        stat:
          path: /var/lib/kubelet/config.yaml
        register: kubeletConfig

      - name: Prepare join-command - 1) Reset node
        command: kubeadm reset -f
        register: resetNode
        when:
          - kubeletConfig.stat.exists
          - JoinCommandCopied.changed

      - name: Prepare join-command - 2) Remove remaining file /etc/kubernetes/pki/ca.crt
        file:
          path: /etc/kubernetes/pki/ca.crt
          state: absent
        when: resetNode.changed or not kubeletConfig.stat.exists

      - name: Prepare join-command - 3) Pause to let master detect that previous node has gone
        pause:
          seconds: 90
        when: resetNode.changed

      - name: Join the node to cluster
        command: sh join-command.sh
        when: resetNode.changed or not kubeletConfig.stat.exists

      - name: Register insecure local registry on master node
        lineinfile:
          path: /etc/docker/daemon.json
          line: '{ "insecure-registries":["192.168.50.10:5000"] }'
          create: yes
        register: localDockerReg

      - name: Restart docker.service
        service:
          name: docker.service
          daemon_reload: yes
          state: restarted
        when: localDockerReg.changed

      handlers:
      - name: docker status
        service: name=docker state=started
