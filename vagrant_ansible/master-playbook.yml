---
    - hosts: all
      become: true
      tasks:

      - name: Install packages that allow apt to be used over HTTPS
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg-agent
          - software-properties-common

      - name: Add an apt signing key for Docker
        apt_key:
          url: https://download.docker.com/linux/ubuntu/gpg
          state: present

      - name: Add apt repository for stable version
        apt_repository:
          repo: deb [arch=amd64] https://download.docker.com/linux/ubuntu xenial stable
          state: present

      - name: Install docker and its dependecies
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
          - docker-ce
          - docker-ce-cli
          - containerd.io
        notify:
          - docker status

      - name: Add vagrant user to docker group
        user:
          name: vagrant
          group: docker

      - name: Remove swapfile from /etc/fstab
        mount:
          name: "{{ item }}"
          fstype: swap
          state: absent
        with_items:
          - swap
          - none

      - name: Disable swap
        command: swapoff -a
        when: ansible_swaptotal_mb > 0

      - name: Add an apt signing key for Kubernetes
        apt_key:
          url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
          state: present

      - name: Adding apt repository for Kubernetes
        apt_repository:
          repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
          state: present
          filename: kubernetes.list

      - name: Install Kubernetes binaries
        apt:
          name: "{{ packages }}"
          state: present
          update_cache: yes
        vars:
          packages:
            - kubelet
            - kubeadm
            - kubectl

      - name: Configure node ip
        lineinfile:
          path: /etc/default/kubelet
          line: KUBELET_EXTRA_ARGS=--node-ip={{ node_ip }}
          create: yes
        register: config_node_ip

      - name: Restart kubelet
        service:
          name: kubelet
          daemon_reload: yes
          state: restarted
        when: config_node_ip.changed

      - name: Check if kube config exists
        stat:
          path: /var/lib/kubelet/config.yaml
        register: kubeletConfig

      - name: Initialize the Kubernetes cluster using kubeadm
        command: kubeadm init --apiserver-advertise-address="192.168.50.10" --apiserver-cert-extra-sans="192.168.50.10"  --node-name k8s-master --pod-network-cidr=192.168.0.0/16
        when: not kubeletConfig.stat.exists
        register: kubeadmInit

      - name: Setup kubeconfig for vagrant user 1) mkdir folder
        file:
          path: /home/vagrant/.kube
          state: directory

      - name: Setup kubeconfig for vagrant user 2) copy file - Get ckecksum of existing file
        stat:
          path: "/home/vagrant/.kube/config"
        register: existingFile

      - name: Setup kubeconfig for vagrant user 2) copy file - Get ckecksum of new file
        stat:
          path: "/etc/kubernetes/admin.conf"
        register: newFile

      - name: Setup kubeconfig for vagrant user 2) copy file - copy if necessary
        command: cp /etc/kubernetes/admin.conf /home/vagrant/.kube/config
        when: not existingFile.stat.exists or existingFile.stat.checksum != newFile.stat.checksum

      - name: Setup kubeconfig for vagrant user 3) chown file
        file:
          path: /home/vagrant/.kube/config
          owner: vagrant
          group: vagrant

      - name: Read docker container
        command: docker ps
        register: dockerContainer
        changed_when: false

          # https://github.com/vmware-tanzu/antrea/blob/master/docs/getting-started.md
      - name: Install antrea NIC rules
        command: kubectl apply -f https://raw.githubusercontent.com/vmware-tanzu/antrea/master/build/yamls/antrea.yml
        become: false
        when: not "antrea" in dockerContainer.stdout

      - name: Join command - 1) Generate (if necessary)
        command: kubeadm token create --print-join-command
        register: join_command
        when: kubeadmInit.changed or not ("./join-command.sh" is file)

      - name: Join command - 2) Copy join command to local file (if necessary)
        local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="./join-command.sh"
        become: false
        when: join_command.changed

      - name: Check whether devspace is installed
        stat:
          path: /usr/local/bin/devspace
        register: devspaceInstalled

      - name: Download devspace
        get_url:
          url: https://github.com/devspace-cloud/devspace/releases/download/v5.0.2/devspace-linux-amd64
          dest: /tmp/devspace
        when: not devspaceInstalled.stat.exists

      - name: Install devspace
        command: install /tmp/devspace /usr/local/bin
        when: not devspaceInstalled.stat.exists

      - name: create local docker registry instance
        command: docker run -d -p 5000:5000 --restart=always --name registry registry:2
        when: not "registry" in dockerContainer.stdout

      - name: Register insecure local registry on master node
        lineinfile:
          path: /etc/docker/daemon.json
          line: '{ "insecure-registries":["192.168.50.10:5000"] }'
          create: yes
        register: localDockerReg

      - name: Restart docker.service
        service:
          name: docker.service
          daemon_reload: yes
          state: restarted
        when: localDockerReg.changed

      handlers:
      - name: docker status
        service: name=docker state=started
